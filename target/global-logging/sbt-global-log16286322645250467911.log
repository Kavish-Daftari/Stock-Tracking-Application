[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ankur\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ankur\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Amazon.com Inc. Java 11.0.22)
[debug] Load.defaultLoad until apply took 128.7387ms
[debug]           Load.loadUnit: plugins took 170.4704ms
[debug]           Load.loadUnit: defsScala took 0.6552ms
[debug] [Loading] Scanning directory C:\Users\ankur\Documents\Stock-Tracking-Application\project
[debug]             Load.loadUnit: mkEval took 10.7382ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ankur\Documents\Stock-Tracking-Application\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 34.0677 ms
[info] loading settings for project stock-tracking-application-build from idea.sbt ...
[debug]               Load.resolveProject(stock-tracking-application-build) took 88.7224ms
[debug]             Load.loadTransitive: finalizeProject(Project(id stock-tracking-application-build, base: C:\Users\ankur\Documents\Stock-Tracking-Application\project, plugins: List(<none>))) took 137.955ms
[debug] [Loading] Done in C:\Users\ankur\Documents\Stock-Tracking-Application\project, returning: (stock-tracking-application-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5534.0505ms
[debug]           Load.loadUnit: cleanEvalClasses took 15.5555ms
[debug]         Load.loadUnit(file:/C:/Users/ankur/Documents/Stock-Tracking-Application/project/, ...) took 5730.9695ms
[debug]       Load.apply: load took 6028.4293ms
[debug]       Load.apply: resolveProjects took 12.8647ms
[debug]       Load.apply: finalTransforms took 137.7541ms
[debug]       Load.apply: config.delegates took 28.4885ms
[debug]       Load.apply: Def.make(settings)... took 1188.5315ms
[debug]       Load.apply: structureIndex took 332.8696ms
[debug]       Load.apply: mkStreams took 9.8987ms
[info] loading project definition from C:\Users\ankur\Documents\Stock-Tracking-Application\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 13953.4206ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\ankur\Documents\Stock-Tracking-Application
[debug]       Load.loadUnit: mkEval took 0.6162ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.4017 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 90.2917ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\ankur\Documents\Stock-Tracking-Application, plugins: List(<none>))) took 104.2668ms
[debug] [Loading] Done in C:\Users\ankur\Documents\Stock-Tracking-Application, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2710.2902ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.0566ms
[debug]   Load.loadUnit(file:/C:/Users/ankur/Documents/Stock-Tracking-Application/, ...) took 16672.5185ms
[debug] Load.apply: load took 16699.04ms
[debug] Load.apply: resolveProjects took 0.121ms
[debug] Load.apply: finalTransforms took 142.6189ms
[debug] Load.apply: config.delegates took 0.4457ms
[debug] Load.apply: Def.make(settings)... took 238.4997ms
[debug] Load.apply: structureIndex took 40.0373ms
[debug] Load.apply: mkStreams took 0.0032ms
[info] set current project to Stock-Tracking-Application (in build file:/C:/Users/ankur/Documents/Stock-Tracking-Application/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53151 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53151, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Stock-Tracking-Application (in build file:/C:/Users/ankur/Documents/Stock-Tracking-Application/)
[debug] > Exec(idea-shell, None, None)
